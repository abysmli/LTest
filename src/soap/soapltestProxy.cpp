/* soapltestProxy.cpp
   Generated by gSOAP 2.8.10 from ltestgsoap.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapltestProxy.h"

ltestProxy::ltestProxy()
{	this->soap = soap_new();
	this->own = true;
	ltestProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

ltestProxy::ltestProxy(struct soap *_soap)
{	this->soap = _soap;
	this->own = false;
	ltestProxy_init(_soap->imode, _soap->omode);
}

ltestProxy::ltestProxy(const char *url)
{	this->soap = soap_new();
	this->own = true;
	ltestProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

ltestProxy::ltestProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	ltestProxy_init(iomode, iomode);
}

ltestProxy::ltestProxy(const char *url, soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	ltestProxy_init(iomode, iomode);
	soap_endpoint = url;
}

ltestProxy::ltestProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->own = true;
	ltestProxy_init(imode, omode);
}

ltestProxy::~ltestProxy()
{	if (this->own)
		soap_free(this->soap);
}

void ltestProxy::ltestProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns", "http://tempuri.org/ns.xsd", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
}

void ltestProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void ltestProxy::reset()
{	destroy();
	soap_done(this->soap);
	soap_init(this->soap);
	ltestProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void ltestProxy::soap_noheader()
{	this->soap->header = NULL;
}

const SOAP_ENV__Header *ltestProxy::soap_header()
{	return this->soap->header;
}

const SOAP_ENV__Fault *ltestProxy::soap_fault()
{	return this->soap->fault;
}

const char *ltestProxy::soap_fault_string()
{	return *soap_faultstring(this->soap);
}

const char *ltestProxy::soap_fault_detail()
{	return *soap_faultdetail(this->soap);
}

int ltestProxy::soap_close_socket()
{	return soap_closesock(this->soap);
}

int ltestProxy::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

void ltestProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void ltestProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *ltestProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int ltestProxy::Port(const char *endpoint, const char *soap_action, unsigned short &pPort)
{	struct soap *soap = this->soap;
	struct ns__Port soap_tmp_ns__Port;
	struct ns__PortResponse *soap_tmp_ns__PortResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:5555";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__Port(soap, &soap_tmp_ns__Port);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Port(soap, &soap_tmp_ns__Port, "ns:Port", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Port(soap, &soap_tmp_ns__Port, "ns:Port", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&pPort)
		return soap_closesock(soap);
	soap_default_unsignedShort(soap, &pPort);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__PortResponse = soap_get_ns__PortResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	pPort = soap_tmp_ns__PortResponse->pPort;
	return soap_closesock(soap);
}

int ltestProxy::release_ssession(const char *endpoint, const char *soap_action, struct ReleaseSSessionResponse &response)
{	struct soap *soap = this->soap;
	struct ns__release_ssession soap_tmp_ns__release_ssession;
	struct ns__release_ssessionResponse *soap_tmp_ns__release_ssessionResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:5555";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__release_ssession(soap, &soap_tmp_ns__release_ssession);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__release_ssession(soap, &soap_tmp_ns__release_ssession, "ns:release-ssession", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__release_ssession(soap, &soap_tmp_ns__release_ssession, "ns:release-ssession", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	soap_default_ReleaseSSessionResponse(soap, &response);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__release_ssessionResponse = soap_get_ns__release_ssessionResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	response = soap_tmp_ns__release_ssessionResponse->response;
	return soap_closesock(soap);
}

int ltestProxy::release_rsession(const char *endpoint, const char *soap_action, struct ReleaseRSessionResponse &response)
{	struct soap *soap = this->soap;
	struct ns__release_rsession soap_tmp_ns__release_rsession;
	struct ns__release_rsessionResponse *soap_tmp_ns__release_rsessionResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:5555";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__release_rsession(soap, &soap_tmp_ns__release_rsession);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__release_rsession(soap, &soap_tmp_ns__release_rsession, "ns:release-rsession", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__release_rsession(soap, &soap_tmp_ns__release_rsession, "ns:release-rsession", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	soap_default_ReleaseRSessionResponse(soap, &response);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__release_rsessionResponse = soap_get_ns__release_rsessionResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	response = soap_tmp_ns__release_rsessionResponse->response;
	return soap_closesock(soap);
}

int ltestProxy::get_samples_whole(const char *endpoint, const char *soap_action, std::vector<struct whole_sample_t >&GetSampleList)
{	struct soap *soap = this->soap;
	struct ns__get_samples_whole soap_tmp_ns__get_samples_whole;
	struct ns__get_samples_wholeResponse *soap_tmp_ns__get_samples_wholeResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:5555";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__get_samples_whole(soap, &soap_tmp_ns__get_samples_whole);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_samples_whole(soap, &soap_tmp_ns__get_samples_whole, "ns:get-samples-whole", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_samples_whole(soap, &soap_tmp_ns__get_samples_whole, "ns:get-samples-whole", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&GetSampleList)
		return soap_closesock(soap);
	soap_default_std__vectorTemplateOfwhole_sample_t(soap, &GetSampleList);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__get_samples_wholeResponse = soap_get_ns__get_samples_wholeResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	GetSampleList = soap_tmp_ns__get_samples_wholeResponse->GetSampleList;
	return soap_closesock(soap);
}

int ltestProxy::getBasicSourceStats(const char *endpoint, const char *soap_action, struct BasicSourceStats_t &GetBasicSourceStatics)
{	struct soap *soap = this->soap;
	struct ns__getBasicSourceStats soap_tmp_ns__getBasicSourceStats;
	struct ns__getBasicSourceStatsResponse *soap_tmp_ns__getBasicSourceStatsResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:5555";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__getBasicSourceStats(soap, &soap_tmp_ns__getBasicSourceStats);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__getBasicSourceStats(soap, &soap_tmp_ns__getBasicSourceStats, "ns:getBasicSourceStats", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__getBasicSourceStats(soap, &soap_tmp_ns__getBasicSourceStats, "ns:getBasicSourceStats", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&GetBasicSourceStatics)
		return soap_closesock(soap);
	soap_default_BasicSourceStats_t(soap, &GetBasicSourceStatics);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__getBasicSourceStatsResponse = soap_get_ns__getBasicSourceStatsResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	GetBasicSourceStatics = soap_tmp_ns__getBasicSourceStatsResponse->GetBasicSourceStatics;
	return soap_closesock(soap);
}

int ltestProxy::get_samples(const char *endpoint, const char *soap_action, std::vector<struct sample_t >&sample_list_t)
{	struct soap *soap = this->soap;
	struct ns__get_samples soap_tmp_ns__get_samples;
	struct ns__get_samplesResponse *soap_tmp_ns__get_samplesResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:5555";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__get_samples(soap, &soap_tmp_ns__get_samples);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_samples(soap, &soap_tmp_ns__get_samples, "ns:get-samples", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_samples(soap, &soap_tmp_ns__get_samples, "ns:get-samples", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&sample_list_t)
		return soap_closesock(soap);
	soap_default_std__vectorTemplateOfsample_t(soap, &sample_list_t);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__get_samplesResponse = soap_get_ns__get_samplesResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	sample_list_t = soap_tmp_ns__get_samplesResponse->sample_list_t;
	return soap_closesock(soap);
}

int ltestProxy::finish_session(const char *endpoint, const char *soap_action, unsigned int pLastSeqNo, struct FinishSessionResponse &response)
{	struct soap *soap = this->soap;
	struct ns__finish_session soap_tmp_ns__finish_session;
	struct ns__finish_sessionResponse *soap_tmp_ns__finish_sessionResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:5555";
	soap->encodingStyle = NULL;
	soap_tmp_ns__finish_session.pLastSeqNo = pLastSeqNo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__finish_session(soap, &soap_tmp_ns__finish_session);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__finish_session(soap, &soap_tmp_ns__finish_session, "ns:finish-session", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__finish_session(soap, &soap_tmp_ns__finish_session, "ns:finish-session", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	soap_default_FinishSessionResponse(soap, &response);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__finish_sessionResponse = soap_get_ns__finish_sessionResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	response = soap_tmp_ns__finish_sessionResponse->response;
	return soap_closesock(soap);
}

int ltestProxy::get_time_by_gsoap(const char *endpoint, const char *soap_action, struct tv_type &ptv)
{	struct soap *soap = this->soap;
	struct ns__get_time_by_gsoap soap_tmp_ns__get_time_by_gsoap;
	struct ns__get_time_by_gsoapResponse *soap_tmp_ns__get_time_by_gsoapResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:5555";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__get_time_by_gsoap(soap, &soap_tmp_ns__get_time_by_gsoap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_time_by_gsoap(soap, &soap_tmp_ns__get_time_by_gsoap, "ns:get-time-by-gsoap", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_time_by_gsoap(soap, &soap_tmp_ns__get_time_by_gsoap, "ns:get-time-by-gsoap", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ptv)
		return soap_closesock(soap);
	soap_default_tv_type(soap, &ptv);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__get_time_by_gsoapResponse = soap_get_ns__get_time_by_gsoapResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	ptv = soap_tmp_ns__get_time_by_gsoapResponse->ptv;
	return soap_closesock(soap);
}

int ltestProxy::start_UDP_time_port(const char *endpoint, const char *soap_action, unsigned short pPort, unsigned short &OPort)
{	struct soap *soap = this->soap;
	struct ns__start_UDP_time_port soap_tmp_ns__start_UDP_time_port;
	struct ns__start_UDP_time_portResponse *soap_tmp_ns__start_UDP_time_portResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:5555";
	soap->encodingStyle = NULL;
	soap_tmp_ns__start_UDP_time_port.pPort = pPort;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__start_UDP_time_port(soap, &soap_tmp_ns__start_UDP_time_port);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__start_UDP_time_port(soap, &soap_tmp_ns__start_UDP_time_port, "ns:start-UDP-time-port", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__start_UDP_time_port(soap, &soap_tmp_ns__start_UDP_time_port, "ns:start-UDP-time-port", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&OPort)
		return soap_closesock(soap);
	soap_default_unsignedShort(soap, &OPort);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__start_UDP_time_portResponse = soap_get_ns__start_UDP_time_portResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	OPort = soap_tmp_ns__start_UDP_time_portResponse->OPort;
	return soap_closesock(soap);
}

int ltestProxy::release_UDP_time_port(const char *endpoint, const char *soap_action, struct ReleaseUDPTimePortResponse &response)
{	struct soap *soap = this->soap;
	struct ns__release_UDP_time_port soap_tmp_ns__release_UDP_time_port;
	struct ns__release_UDP_time_portResponse *soap_tmp_ns__release_UDP_time_portResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:5555";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__release_UDP_time_port(soap, &soap_tmp_ns__release_UDP_time_port);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__release_UDP_time_port(soap, &soap_tmp_ns__release_UDP_time_port, "ns:release-UDP-time-port", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__release_UDP_time_port(soap, &soap_tmp_ns__release_UDP_time_port, "ns:release-UDP-time-port", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	soap_default_ReleaseUDPTimePortResponse(soap, &response);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__release_UDP_time_portResponse = soap_get_ns__release_UDP_time_portResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	response = soap_tmp_ns__release_UDP_time_portResponse->response;
	return soap_closesock(soap);
}

int ltestProxy::start_rsession(const char *endpoint, const char *soap_action, struct sourceDesc_t sDec, struct StartRSessionResponse &response)
{	struct soap *soap = this->soap;
	struct ns__start_rsession soap_tmp_ns__start_rsession;
	struct ns__start_rsessionResponse *soap_tmp_ns__start_rsessionResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:5555";
	soap->encodingStyle = NULL;
	soap_tmp_ns__start_rsession.sDec = sDec;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__start_rsession(soap, &soap_tmp_ns__start_rsession);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__start_rsession(soap, &soap_tmp_ns__start_rsession, "ns:start-rsession", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__start_rsession(soap, &soap_tmp_ns__start_rsession, "ns:start-rsession", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	soap_default_StartRSessionResponse(soap, &response);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__start_rsessionResponse = soap_get_ns__start_rsessionResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	response = soap_tmp_ns__start_rsessionResponse->response;
	return soap_closesock(soap);
}

int ltestProxy::start_ssession(const char *endpoint, const char *soap_action, struct sourceDesc_t sDec, struct senderDesc_t senderDesc, struct StartSSessionResponse &response)
{	struct soap *soap = this->soap;
	struct ns__start_ssession soap_tmp_ns__start_ssession;
	struct ns__start_ssessionResponse *soap_tmp_ns__start_ssessionResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:5555";
	soap->encodingStyle = NULL;
	soap_tmp_ns__start_ssession.sDec = sDec;
	soap_tmp_ns__start_ssession.senderDesc = senderDesc;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__start_ssession(soap, &soap_tmp_ns__start_ssession);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__start_ssession(soap, &soap_tmp_ns__start_ssession, "ns:start-ssession", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__start_ssession(soap, &soap_tmp_ns__start_ssession, "ns:start-ssession", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	soap_default_StartSSessionResponse(soap, &response);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__start_ssessionResponse = soap_get_ns__start_ssessionResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	response = soap_tmp_ns__start_ssessionResponse->response;
	return soap_closesock(soap);
}

int ltestProxy::print_sDesc(const char *endpoint, const char *soap_action, struct sourceDesc_t sDec, std::string &str)
{	struct soap *soap = this->soap;
	struct ns__print_sDesc soap_tmp_ns__print_sDesc;
	struct ns__print_sDescResponse *soap_tmp_ns__print_sDescResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:5555";
	soap->encodingStyle = NULL;
	soap_tmp_ns__print_sDesc.sDec = sDec;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__print_sDesc(soap, &soap_tmp_ns__print_sDesc);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__print_sDesc(soap, &soap_tmp_ns__print_sDesc, "ns:print-sDesc", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__print_sDesc(soap, &soap_tmp_ns__print_sDesc, "ns:print-sDesc", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&str)
		return soap_closesock(soap);
	soap_default_std__string(soap, &str);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__print_sDescResponse = soap_get_ns__print_sDescResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	str = soap_tmp_ns__print_sDescResponse->str;
	return soap_closesock(soap);
}

int ltestProxy::ping(const char *endpoint, const char *soap_action, struct PingResponse &response)
{	struct soap *soap = this->soap;
	struct ns__ping soap_tmp_ns__ping;
	struct ns__pingResponse *soap_tmp_ns__pingResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:5555";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__ping(soap, &soap_tmp_ns__ping);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__ping(soap, &soap_tmp_ns__ping, "ns:ping", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__ping(soap, &soap_tmp_ns__ping, "ns:ping", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	soap_default_PingResponse(soap, &response);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__pingResponse = soap_get_ns__pingResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	response = soap_tmp_ns__pingResponse->response;
	return soap_closesock(soap);
}
/* End of client proxy code */
