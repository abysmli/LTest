/* soapltestService.cpp
   Generated by gSOAP 2.8.10 from ltestgsoap.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapltestService.h"

ltestService::ltestService()
{	this->soap = soap_new();
	this->own = true;
	ltestService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

ltestService::ltestService(struct soap *_soap)
{	this->soap = _soap;
	this->own = false;
	ltestService_init(_soap->imode, _soap->omode);
}

ltestService::ltestService(soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	ltestService_init(iomode, iomode);
}

ltestService::ltestService(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->own = true;
	ltestService_init(imode, omode);
}

ltestService::~ltestService()
{	if (this->own)
		soap_free(this->soap);
}

void ltestService::ltestService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns", "http://tempuri.org/ns.xsd", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
};

void ltestService::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void ltestService::reset()
{	destroy();
	soap_done(this->soap);
	soap_init(this->soap);
	ltestService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
ltestService *ltestService::copy()
{	ltestService *dup = SOAP_NEW_COPY(ltestService);
	if (dup)
		soap_copy_context(dup->soap, this->soap);
	return dup;
}
#endif

int ltestService::soap_close_socket()
{	return soap_closesock(this->soap);
}

int ltestService::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

int ltestService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this->soap, string, detailXML);
}

int ltestService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

int ltestService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this->soap, string, detailXML);
}

int ltestService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

void ltestService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void ltestService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *ltestService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

void ltestService::soap_noheader()
{	this->soap->header = NULL;
}

const SOAP_ENV__Header *ltestService::soap_header()
{	return this->soap->header;
}

int ltestService::run(int port)
{	if (soap_valid_socket(this->soap->master) || soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()) || serve())
				return this->soap->error;
			soap_destroy(this->soap);
			soap_end(this->soap);
		}
	}
	else
		return this->soap->error;
	return SOAP_OK;
}

SOAP_SOCKET ltestService::bind(const char *host, int port, int backlog)
{	return soap_bind(this->soap, host, port, backlog);
}

SOAP_SOCKET ltestService::accept()
{	return soap_accept(this->soap);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int ltestService::ssl_accept()
{	return soap_ssl_accept(this->soap);
}
#endif

int ltestService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->soap->max_keep_alive;
#endif
	do
	{

#ifndef WITH_FASTCGI
		if (this->soap->max_keep_alive > 0 && !--k)
			this->soap->keep_alive = 0;
#endif

		if (soap_begin_serve(this->soap))
		{	if (this->soap->error >= SOAP_STOP)
				continue;
			return this->soap->error;
		}
		if (dispatch() || (this->soap->fserveloop && this->soap->fserveloop(this->soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this->soap);
#else
			return soap_send_fault(this->soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this->soap);
		soap_end(this->soap);
	} while (1);
#else
	} while (this->soap->keep_alive);
#endif
	return SOAP_OK;
}

static int serve_ns__Port(ltestService*);
static int serve_ns__release_ssession(ltestService*);
static int serve_ns__release_rsession(ltestService*);
static int serve_ns__get_samples_whole(ltestService*);
static int serve_ns__getBasicSourceStats(ltestService*);
static int serve_ns__get_samples(ltestService*);
static int serve_ns__finish_session(ltestService*);
static int serve_ns__get_time_by_gsoap(ltestService*);
static int serve_ns__start_UDP_time_port(ltestService*);
static int serve_ns__release_UDP_time_port(ltestService*);
static int serve_ns__start_rsession(ltestService*);
static int serve_ns__start_ssession(ltestService*);
static int serve_ns__print_sDesc(ltestService*);
static int serve_ns__ping(ltestService*);

int ltestService::dispatch()
{	ltestService_init(this->soap->imode, this->soap->omode);
	soap_peek_element(this->soap);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns:Port"))
		return serve_ns__Port(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns:release-ssession"))
		return serve_ns__release_ssession(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns:release-rsession"))
		return serve_ns__release_rsession(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns:get-samples-whole"))
		return serve_ns__get_samples_whole(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns:getBasicSourceStats"))
		return serve_ns__getBasicSourceStats(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns:get-samples"))
		return serve_ns__get_samples(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns:finish-session"))
		return serve_ns__finish_session(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns:get-time-by-gsoap"))
		return serve_ns__get_time_by_gsoap(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns:start-UDP-time-port"))
		return serve_ns__start_UDP_time_port(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns:release-UDP-time-port"))
		return serve_ns__release_UDP_time_port(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns:start-rsession"))
		return serve_ns__start_rsession(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns:start-ssession"))
		return serve_ns__start_ssession(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns:print-sDesc"))
		return serve_ns__print_sDesc(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns:ping"))
		return serve_ns__ping(this);
	return this->soap->error = SOAP_NO_METHOD;
}

static int serve_ns__Port(ltestService *service)
{	struct soap *soap = service->soap;
	struct ns__Port soap_tmp_ns__Port;
	struct ns__PortResponse soap_tmp_ns__PortResponse;
	soap_default_ns__PortResponse(soap, &soap_tmp_ns__PortResponse);
	soap_default_ns__Port(soap, &soap_tmp_ns__Port);
	soap->encodingStyle = NULL;
	if (!soap_get_ns__Port(soap, &soap_tmp_ns__Port, "ns:Port", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Port(soap_tmp_ns__PortResponse.pPort);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__PortResponse(soap, &soap_tmp_ns__PortResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__PortResponse(soap, &soap_tmp_ns__PortResponse, "ns:PortResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__PortResponse(soap, &soap_tmp_ns__PortResponse, "ns:PortResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__release_ssession(ltestService *service)
{	struct soap *soap = service->soap;
	struct ns__release_ssession soap_tmp_ns__release_ssession;
	struct ns__release_ssessionResponse soap_tmp_ns__release_ssessionResponse;
	soap_default_ns__release_ssessionResponse(soap, &soap_tmp_ns__release_ssessionResponse);
	soap_default_ns__release_ssession(soap, &soap_tmp_ns__release_ssession);
	soap->encodingStyle = NULL;
	if (!soap_get_ns__release_ssession(soap, &soap_tmp_ns__release_ssession, "ns:release-ssession", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->release_ssession(soap_tmp_ns__release_ssessionResponse.response);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__release_ssessionResponse(soap, &soap_tmp_ns__release_ssessionResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__release_ssessionResponse(soap, &soap_tmp_ns__release_ssessionResponse, "ns:release-ssessionResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__release_ssessionResponse(soap, &soap_tmp_ns__release_ssessionResponse, "ns:release-ssessionResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__release_rsession(ltestService *service)
{	struct soap *soap = service->soap;
	struct ns__release_rsession soap_tmp_ns__release_rsession;
	struct ns__release_rsessionResponse soap_tmp_ns__release_rsessionResponse;
	soap_default_ns__release_rsessionResponse(soap, &soap_tmp_ns__release_rsessionResponse);
	soap_default_ns__release_rsession(soap, &soap_tmp_ns__release_rsession);
	soap->encodingStyle = NULL;
	if (!soap_get_ns__release_rsession(soap, &soap_tmp_ns__release_rsession, "ns:release-rsession", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->release_rsession(soap_tmp_ns__release_rsessionResponse.response);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__release_rsessionResponse(soap, &soap_tmp_ns__release_rsessionResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__release_rsessionResponse(soap, &soap_tmp_ns__release_rsessionResponse, "ns:release-rsessionResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__release_rsessionResponse(soap, &soap_tmp_ns__release_rsessionResponse, "ns:release-rsessionResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__get_samples_whole(ltestService *service)
{	struct soap *soap = service->soap;
	struct ns__get_samples_whole soap_tmp_ns__get_samples_whole;
	struct ns__get_samples_wholeResponse soap_tmp_ns__get_samples_wholeResponse;
	soap_default_ns__get_samples_wholeResponse(soap, &soap_tmp_ns__get_samples_wholeResponse);
	soap_default_ns__get_samples_whole(soap, &soap_tmp_ns__get_samples_whole);
	soap->encodingStyle = NULL;
	if (!soap_get_ns__get_samples_whole(soap, &soap_tmp_ns__get_samples_whole, "ns:get-samples-whole", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->get_samples_whole(soap_tmp_ns__get_samples_wholeResponse.GetSampleList);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__get_samples_wholeResponse(soap, &soap_tmp_ns__get_samples_wholeResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_samples_wholeResponse(soap, &soap_tmp_ns__get_samples_wholeResponse, "ns:get-samples-wholeResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_samples_wholeResponse(soap, &soap_tmp_ns__get_samples_wholeResponse, "ns:get-samples-wholeResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__getBasicSourceStats(ltestService *service)
{	struct soap *soap = service->soap;
	struct ns__getBasicSourceStats soap_tmp_ns__getBasicSourceStats;
	struct ns__getBasicSourceStatsResponse soap_tmp_ns__getBasicSourceStatsResponse;
	soap_default_ns__getBasicSourceStatsResponse(soap, &soap_tmp_ns__getBasicSourceStatsResponse);
	soap_default_ns__getBasicSourceStats(soap, &soap_tmp_ns__getBasicSourceStats);
	soap->encodingStyle = NULL;
	if (!soap_get_ns__getBasicSourceStats(soap, &soap_tmp_ns__getBasicSourceStats, "ns:getBasicSourceStats", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->getBasicSourceStats(soap_tmp_ns__getBasicSourceStatsResponse.GetBasicSourceStatics);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__getBasicSourceStatsResponse(soap, &soap_tmp_ns__getBasicSourceStatsResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__getBasicSourceStatsResponse(soap, &soap_tmp_ns__getBasicSourceStatsResponse, "ns:getBasicSourceStatsResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__getBasicSourceStatsResponse(soap, &soap_tmp_ns__getBasicSourceStatsResponse, "ns:getBasicSourceStatsResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__get_samples(ltestService *service)
{	struct soap *soap = service->soap;
	struct ns__get_samples soap_tmp_ns__get_samples;
	struct ns__get_samplesResponse soap_tmp_ns__get_samplesResponse;
	soap_default_ns__get_samplesResponse(soap, &soap_tmp_ns__get_samplesResponse);
	soap_default_ns__get_samples(soap, &soap_tmp_ns__get_samples);
	soap->encodingStyle = NULL;
	if (!soap_get_ns__get_samples(soap, &soap_tmp_ns__get_samples, "ns:get-samples", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->get_samples(soap_tmp_ns__get_samplesResponse.sample_list_t);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__get_samplesResponse(soap, &soap_tmp_ns__get_samplesResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_samplesResponse(soap, &soap_tmp_ns__get_samplesResponse, "ns:get-samplesResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_samplesResponse(soap, &soap_tmp_ns__get_samplesResponse, "ns:get-samplesResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__finish_session(ltestService *service)
{	struct soap *soap = service->soap;
	struct ns__finish_session soap_tmp_ns__finish_session;
	struct ns__finish_sessionResponse soap_tmp_ns__finish_sessionResponse;
	soap_default_ns__finish_sessionResponse(soap, &soap_tmp_ns__finish_sessionResponse);
	soap_default_ns__finish_session(soap, &soap_tmp_ns__finish_session);
	soap->encodingStyle = NULL;
	if (!soap_get_ns__finish_session(soap, &soap_tmp_ns__finish_session, "ns:finish-session", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->finish_session(soap_tmp_ns__finish_session.pLastSeqNo, soap_tmp_ns__finish_sessionResponse.response);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__finish_sessionResponse(soap, &soap_tmp_ns__finish_sessionResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__finish_sessionResponse(soap, &soap_tmp_ns__finish_sessionResponse, "ns:finish-sessionResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__finish_sessionResponse(soap, &soap_tmp_ns__finish_sessionResponse, "ns:finish-sessionResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__get_time_by_gsoap(ltestService *service)
{	struct soap *soap = service->soap;
	struct ns__get_time_by_gsoap soap_tmp_ns__get_time_by_gsoap;
	struct ns__get_time_by_gsoapResponse soap_tmp_ns__get_time_by_gsoapResponse;
	soap_default_ns__get_time_by_gsoapResponse(soap, &soap_tmp_ns__get_time_by_gsoapResponse);
	soap_default_ns__get_time_by_gsoap(soap, &soap_tmp_ns__get_time_by_gsoap);
	soap->encodingStyle = NULL;
	if (!soap_get_ns__get_time_by_gsoap(soap, &soap_tmp_ns__get_time_by_gsoap, "ns:get-time-by-gsoap", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->get_time_by_gsoap(soap_tmp_ns__get_time_by_gsoapResponse.ptv);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__get_time_by_gsoapResponse(soap, &soap_tmp_ns__get_time_by_gsoapResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__get_time_by_gsoapResponse(soap, &soap_tmp_ns__get_time_by_gsoapResponse, "ns:get-time-by-gsoapResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__get_time_by_gsoapResponse(soap, &soap_tmp_ns__get_time_by_gsoapResponse, "ns:get-time-by-gsoapResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__start_UDP_time_port(ltestService *service)
{	struct soap *soap = service->soap;
	struct ns__start_UDP_time_port soap_tmp_ns__start_UDP_time_port;
	struct ns__start_UDP_time_portResponse soap_tmp_ns__start_UDP_time_portResponse;
	soap_default_ns__start_UDP_time_portResponse(soap, &soap_tmp_ns__start_UDP_time_portResponse);
	soap_default_ns__start_UDP_time_port(soap, &soap_tmp_ns__start_UDP_time_port);
	soap->encodingStyle = NULL;
	if (!soap_get_ns__start_UDP_time_port(soap, &soap_tmp_ns__start_UDP_time_port, "ns:start-UDP-time-port", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->start_UDP_time_port(soap_tmp_ns__start_UDP_time_port.pPort, soap_tmp_ns__start_UDP_time_portResponse.OPort);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__start_UDP_time_portResponse(soap, &soap_tmp_ns__start_UDP_time_portResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__start_UDP_time_portResponse(soap, &soap_tmp_ns__start_UDP_time_portResponse, "ns:start-UDP-time-portResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__start_UDP_time_portResponse(soap, &soap_tmp_ns__start_UDP_time_portResponse, "ns:start-UDP-time-portResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__release_UDP_time_port(ltestService *service)
{	struct soap *soap = service->soap;
	struct ns__release_UDP_time_port soap_tmp_ns__release_UDP_time_port;
	struct ns__release_UDP_time_portResponse soap_tmp_ns__release_UDP_time_portResponse;
	soap_default_ns__release_UDP_time_portResponse(soap, &soap_tmp_ns__release_UDP_time_portResponse);
	soap_default_ns__release_UDP_time_port(soap, &soap_tmp_ns__release_UDP_time_port);
	soap->encodingStyle = NULL;
	if (!soap_get_ns__release_UDP_time_port(soap, &soap_tmp_ns__release_UDP_time_port, "ns:release-UDP-time-port", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->release_UDP_time_port(soap_tmp_ns__release_UDP_time_portResponse.response);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__release_UDP_time_portResponse(soap, &soap_tmp_ns__release_UDP_time_portResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__release_UDP_time_portResponse(soap, &soap_tmp_ns__release_UDP_time_portResponse, "ns:release-UDP-time-portResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__release_UDP_time_portResponse(soap, &soap_tmp_ns__release_UDP_time_portResponse, "ns:release-UDP-time-portResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__start_rsession(ltestService *service)
{	struct soap *soap = service->soap;
	struct ns__start_rsession soap_tmp_ns__start_rsession;
	struct ns__start_rsessionResponse soap_tmp_ns__start_rsessionResponse;
	soap_default_ns__start_rsessionResponse(soap, &soap_tmp_ns__start_rsessionResponse);
	soap_default_ns__start_rsession(soap, &soap_tmp_ns__start_rsession);
	soap->encodingStyle = NULL;
	if (!soap_get_ns__start_rsession(soap, &soap_tmp_ns__start_rsession, "ns:start-rsession", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->start_rsession(soap_tmp_ns__start_rsession.sDec, soap_tmp_ns__start_rsessionResponse.response);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__start_rsessionResponse(soap, &soap_tmp_ns__start_rsessionResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__start_rsessionResponse(soap, &soap_tmp_ns__start_rsessionResponse, "ns:start-rsessionResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__start_rsessionResponse(soap, &soap_tmp_ns__start_rsessionResponse, "ns:start-rsessionResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__start_ssession(ltestService *service)
{	struct soap *soap = service->soap;
	struct ns__start_ssession soap_tmp_ns__start_ssession;
	struct ns__start_ssessionResponse soap_tmp_ns__start_ssessionResponse;
	soap_default_ns__start_ssessionResponse(soap, &soap_tmp_ns__start_ssessionResponse);
	soap_default_ns__start_ssession(soap, &soap_tmp_ns__start_ssession);
	soap->encodingStyle = NULL;
	if (!soap_get_ns__start_ssession(soap, &soap_tmp_ns__start_ssession, "ns:start-ssession", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->start_ssession(soap_tmp_ns__start_ssession.sDec, soap_tmp_ns__start_ssession.senderDesc, soap_tmp_ns__start_ssessionResponse.response);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__start_ssessionResponse(soap, &soap_tmp_ns__start_ssessionResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__start_ssessionResponse(soap, &soap_tmp_ns__start_ssessionResponse, "ns:start-ssessionResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__start_ssessionResponse(soap, &soap_tmp_ns__start_ssessionResponse, "ns:start-ssessionResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__print_sDesc(ltestService *service)
{	struct soap *soap = service->soap;
	struct ns__print_sDesc soap_tmp_ns__print_sDesc;
	struct ns__print_sDescResponse soap_tmp_ns__print_sDescResponse;
	soap_default_ns__print_sDescResponse(soap, &soap_tmp_ns__print_sDescResponse);
	soap_default_ns__print_sDesc(soap, &soap_tmp_ns__print_sDesc);
	soap->encodingStyle = NULL;
	if (!soap_get_ns__print_sDesc(soap, &soap_tmp_ns__print_sDesc, "ns:print-sDesc", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->print_sDesc(soap_tmp_ns__print_sDesc.sDec, soap_tmp_ns__print_sDescResponse.str);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__print_sDescResponse(soap, &soap_tmp_ns__print_sDescResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__print_sDescResponse(soap, &soap_tmp_ns__print_sDescResponse, "ns:print-sDescResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__print_sDescResponse(soap, &soap_tmp_ns__print_sDescResponse, "ns:print-sDescResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__ping(ltestService *service)
{	struct soap *soap = service->soap;
	struct ns__ping soap_tmp_ns__ping;
	struct ns__pingResponse soap_tmp_ns__pingResponse;
	soap_default_ns__pingResponse(soap, &soap_tmp_ns__pingResponse);
	soap_default_ns__ping(soap, &soap_tmp_ns__ping);
	soap->encodingStyle = NULL;
	if (!soap_get_ns__ping(soap, &soap_tmp_ns__ping, "ns:ping", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->ping(soap_tmp_ns__pingResponse.response);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__pingResponse(soap, &soap_tmp_ns__pingResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__pingResponse(soap, &soap_tmp_ns__pingResponse, "ns:pingResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__pingResponse(soap, &soap_tmp_ns__pingResponse, "ns:pingResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
